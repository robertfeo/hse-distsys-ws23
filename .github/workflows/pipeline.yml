name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3.13.0
        with:
          distribution: "adopt"
          java-version: "17"

      - name: Cache Maven dependencies
        uses: actions/cache@v3.3.2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and Test Backend
        working-directory: ./backend
        run: mvn clean install

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.0
        with:
          node-version: 18

      - name: Cache Node.js modules
        uses: actions/cache@v3.3.2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node

      - name: Build and Test Frontend
        working-directory: ./frontend
        run: |
          npm install
          npm run test
          npm run build

  package-artifacts:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Bump version and create a tag if necessary
        id: bump_version
        uses: actions/github-script@v6
        if: startsWith(github.ref, 'refs/tags/') == false
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { Octokit } = require("@octokit/core");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            let latestRelease;
            try {
              latestRelease = await octokit.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
              console.log('No latest release found');
            }
  
            let version = '0.0.1';
            if (latestRelease && latestRelease.data.tag_name) {
              const latestTag = latestRelease.data.tag_name;
              const [major, minor, patch] = latestTag.slice(1).split('.').map(num => parseInt(num, 10));
              version = `${major}.${minor}.${patch + 1}`;
            }
            const newTag = `v${version}`;
            console.log(`New tag: ${newTag}`);
            
            if (latestRelease.data.tag_name !== newTag) {
              await octokit.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${newTag}`,
                sha: context.sha
              });
              return newTag;
            } else {
              return '';
            }
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ steps.bump_version.outputs.result != '' }}
          tags: |
            rofeit00/todo-backend:${{ env.VERSION }}
            rofeit00/todo-frontend:${{ env.VERSION }}
        env:
          VERSION: ${{ github.ref == 'refs/tags/v*.*.*' && github.ref || github.run_id }}          

#      - name: Build Docker image for backend
#        run: |
#          docker build -t rofeit00/todo-backend:${{ steps.tag_version.outputs.new_tag }} ./backend
#      - name: Build Docker image for frontend
#        run: |
#          docker build -t rofeit00/todo-frontend:${{ steps.tag_version.outputs.new_tag }} ./frontend
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v1
#        with:
#          username: rofeit00
#          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
#      - name: Push Docker images
#        run: |
#          docker push rofeit00/todo-backend:${{ steps.get_tag.outputs.tag }}
#          docker push rofeit00/todo-frontend:${{ steps.get_tag.outputs.tag }}

#  deploy:
#    needs: [package-artifacts]
#    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#    runs-on: ubuntu-latest
#    steps:
#      - name: Deploy with docker-compose
#        run: docker-compose up -d
